package main

import (
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"ticket_app/configs"
	"ticket_app/internal/email"
	"ticket_app/internal/storage"
	"ticket_app/pkg/logger"

	"time"
)

func main() {
	fmt.Println("Service started...")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cnf := configs.NewConfig()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
	logger.InitLogger("logs/app.log")
	go logger.ManageLogs("logs/", 5)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ email'–æ–≤
	db := storage.NewFileDB("data/emails.log")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∏–ª–µ—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ
	go func() {
		for {
			logger.Log.Info().Msg("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∏–ª–µ—Ç–æ–≤...")
			processTickets(cnf, db)
			logger.Log.Info().Msg("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

			time.Sleep(cnf.RequestDelay)
		}
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
	http.HandleFunc("/status", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç\n"))
	})
	http.HandleFunc("/process", func(w http.ResponseWriter, r *http.Request) {
		logger.Log.Info().Msg("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ API")
		processTickets(cnf, db)
		w.Write([]byte("–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"))
	})

	server := &http.Server{Addr: ":8080"}
	go func() {
		logger.Log.Info().Msg("üåç HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			logger.Log.Fatal().Err(err).Msg("–û—à–∏–±–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞")
		}
	}()

	// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã (CTRL+C)
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, syscall.SIGINT, syscall.SIGTERM)
	<-stop

	logger.Log.Warn().Msg("‚ùå –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
	server.Close()
}

// processTickets –ø–æ–ª—É—á–∞–µ—Ç –±–∏–ª–µ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email'—ã
func processTickets(cnf *configs.Config, db *storage.FileDB) {
	// –ë–µ—Ä—ë–º –±–∏–ª–µ—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
	startTime := time.Now().Add(-24 * time.Hour).Format("2006-01-02T15-04-05")
	endTime := time.Now().Format("2006-01-02T15-04-05")

	logger.Log.Info().Msgf("üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∏–ª–µ—Ç—ã —Å %s –ø–æ %s", startTime, endTime)

	users, err := email.GetUsers(*cnf, startTime, endTime)
	if err != nil {
		logger.Log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
		return
	}

	logger.Log.Info().Msgf("üìã –ù–∞–π–¥–µ–Ω–æ %d –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", len(users))

	for _, user := range users {
		if user.Email == "" {
			logger.Log.Warn().Msg("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ email")
			continue
		}

		if db.EmailExists(user.Email) {
			logger.Log.Warn().Msgf("‚ö†Ô∏è Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s", user.Email)
			continue
		}

		emailSent, err := email.SendToDashamail(&cnf.Dashamail, user)
		if err != nil {
			logger.Log.Error().Err(err).Msgf("üìõ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: %s", user.Email)
			continue
		}

		db.SaveEmail(emailSent)
		logger.Log.Info().Msgf("üì® Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: %s", emailSent)
	}
}
