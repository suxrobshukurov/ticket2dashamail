package email

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"ticket_app/configs"
)

// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—É–ø–∏–≤—à–∏—Ö –±–∏–ª–µ—Ç—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
func GetUsers(config configs.Config, startTime, endTime string) ([]User, error) {
	client := &http.Client{}
	req, err := http.NewRequest("GET", config.Tickets.ApiUrl, nil)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Authorization", "Token "+config.Tickets.ApiKey)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
	q := req.URL.Query()
	q.Add("start_paid_at", startTime)
	q.Add("end_paid_at", endTime)
	q.Add("status", "bought")
	q.Add("per_page", "1000")
	req.URL.RawQuery = q.Encode()

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
	// logger.Log.Info().Msgf("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: %s", req.URL.String())

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å-–∫–æ–¥
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("API error: %s", resp.Status)
	}

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	// –†–∞—Å–ø–∞—Ä—Å–∏–º JSON
	var ticketResponse TicketsResponse
	if err := json.Unmarshal(body, &ticketResponse); err != nil {
		return nil, err
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏–ª–µ—Ç—ã –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	var users []User
	for _, t := range ticketResponse.Tickets {
		if t.Email == "" {
			// logger.Log.Warn().Msgf("‚ö†Ô∏è –í API –ø–æ–ª—É—á–µ–Ω –±–∏–ª–µ—Ç –±–µ–∑ email: %+v", t)
			continue
		}

		users = append(users, User{
			Email: t.Email,
			City:  t.City,
			Name:  t.Name,
			Phone: t.Phone,
		})
	}

	return users, nil
}
